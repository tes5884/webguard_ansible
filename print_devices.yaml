- name: Parse nextdns.conf for MAC address profile mappings
  hosts: "{{ target_hosts }}"
  become: yes
  tasks:
    - name: Read nextdns.conf file
      ansible.builtin.slurp:
        src: /usr/local/etc/nextdns.conf
      register: nextdns_conf_raw

    - name: Decode and split nextdns.conf contents
      set_fact:
        nextdns_conf_content: "{{ nextdns_conf_raw.content | b64decode | split('\n') }}"

    - name: Filter all profile lines
      set_fact:
        profile_lines: "{{ nextdns_conf_content | select('search', '^profile\\s+') | list }}"

    - name: Extract MAC addresses, profiles, and optional device names
      set_fact:
        mac_profiles: "{{ profile_lines 
                         | select('search', '^profile\\s+([0-9A-Fa-f:]+=\\w+)(?:\\s+#.*)?')
                         | map('regex_replace', '^profile\\s+([0-9A-Fa-f:]+)=(\\w+)(?:\\s+#(.*))?', '{\"mac\": \"\\1\", \"profile\": \"\\2\", \"device_name\": \"\\3\"}')
                         | map('from_json')
                         | list }}"

    - name: Extract profile lines with only profile ID
      set_fact:
        simple_profiles: "{{ profile_lines 
                            | select('search', '^profile\\s+\\w+$')
                            | map('regex_replace', '^profile\\s+(\\w+)', '{\"profile\": \"\\1\"}')
                            | map('from_json')
                            | list }}"
                            
    - name: Merge simple and MAC profiles
      set_fact:
        all_profiles: "{{ simple_profiles + mac_profiles }}"

    - name: Display all profiles
      ansible.builtin.debug:
        msg: |
          All profile mappings:
          {% for item in all_profiles %}
          {% if 'mac' in item %}
          'mac': '{{ item.mac }}', 'profile': '{{ item.profile }}'{% if 'device_name' in item %}, 'device_name': '{{ item.device_name }}'{% endif %}
          {% else %}
          'profile': '{{ item.profile }}' (Default Profile)
          {% endif %}
          
          {% endfor %}

